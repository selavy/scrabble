#ifndef CICERO_TABLES_H_
#define CICERO_TABLES_H_


// 26 letters x 2 (blank not / blank) + 1 empty = 53
static const int scrabble__letter_values[53] = {
     1,  3,  3,  2,  1,  4,  2,  4,  1,  8,  5,  1,  3,  1,  1,  3,
    10,  1,  1,  1,  1,  4,  4,  8,  4, 10,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,
};

static const int words_with_friends__letter_values[53] = {
     1,  4,  4,  2,  1,  4,  3,  3,  1, 10,  5,  2,  4,  2,  1,  4,
    10,  1,  1,  1,  2,  5,  4,  8,  3, 10,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,
};

// TODO(peter): had 226 entries so that InvalidSquare will return 1, but don't think that I need that anymore
static const int scrabble__triple_word_squares[226] = {
//  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
//  -------------------------------------------
    3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, // A
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // B
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // C
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // D
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // E
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // F
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // G
    3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, // H
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // I
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // J
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // K
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // L
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // M
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // N
    3, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 3, // O
    1,
};

static const int scrabble__double_word_squares[226] = {
//  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
//  -------------------------------------------
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // A
    1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, // B
    1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, // C
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, // D
    1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, // E
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // F
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // G
    1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, // H
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // I
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // J
    1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, // K
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, // L
    1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, // M
    1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, // N
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // O
    1,
};

static const int scrabble__triple_letter_squares[226] = {
//  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
//  -------------------------------------------
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // A
    1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, // B
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // C
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // D
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // E
    1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, // F
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // G
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // H
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // I
    1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 3, 1, // J
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // K
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // L
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // M
    1, 1, 1, 1, 1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, // N
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // O
    1,
};

static const int scrabble__double_letter_squares[226] = {
//  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
//  -------------------------------------------
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, // A
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // B
    1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, // C
    2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, // D
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // E
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // F
    1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, // G
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, // H
    1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, // I
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // J
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // K
    2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, // L
    1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, // M
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, // N
    1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, // O
    1,
};
// clang-format on

#define WORDS_WITH_FRIENDS
#ifdef WORDS_WITH_FRIENDS

#define _ 1,

#define X 3,
static const int words_with_friends__triple_word_squares[226] = {
//  1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    _ _ _ X _ _ _ _ _ _ _ X _ _ _ // A
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // B
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // C
    X _ _ _ _ _ _ _ _ _ _ _ _ _ X // D
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // E
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // F
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // G
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // H
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // I
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // J
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // K
    X _ _ _ _ _ _ _ _ _ _ _ _ _ X // L
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // M
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // N
    _ _ _ X _ _ _ _ _ _ _ X _ _ _ // O
    _
};
#undef X

#define X 2,
static const int words_with_friends__double_word_squares[226] = {
//  1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // A
    _ _ _ _ _ X _ _ _ X _ _ _ _ _ // B
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // C
    _ _ _ _ _ _ _ X _ _ _ _ _ _ _ // D
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // E
    _ X _ _ _ _ _ _ _ _ _ _ _ X _ // F
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // G
    _ _ _ X _ _ _ _ _ _ _ X _ _ _ // H
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // I
    _ X _ _ _ _ _ _ _ _ _ _ _ X _ // J
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // K
    _ _ _ _ _ _ _ X _ _ _ _ _ _ _ // L
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // M
    _ _ _ _ _ X _ _ _ X _ _ _ _ _ // N
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // O
    _
};
#undef X

#define X 3,
static const int words_with_friends__triple_letter_squares[226] = {
//  1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    _ _ _ _ _ _ X _ X _ _ _ _ _ _ // A
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // B
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // C
    _ _ _ X _ _ _ _ _ _ _ X _ _ _ // D
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // E
    _ _ _ _ _ X _ _ _ X _ _ _ _ _ // F
    X _ _ _ _ _ _ _ _ _ _ _ _ _ X // G
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // H
    X _ _ _ _ _ _ _ _ _ _ _ _ _ X // I
    _ _ _ _ _ X _ _ _ X _ _ _ _ _ // J
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // K
    _ _ _ X _ _ _ _ _ _ _ X _ _ _ // L
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // M
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // N
    _ _ _ _ _ _ X _ X _ _ _ _ _ _ // O
    _
};
#undef X

#define X 2,
static const int words_with_friends__double_letter_squares[226] = {
//  1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // A
    _ _ X _ _ _ _ _ _ _ _ _ X _ _ // B
    _ X _ _ X _ _ _ _ _ X _ _ X _ // C
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // D
    _ _ X _ _ _ X _ X _ _ _ X _ _ // E
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // F
    _ _ _ _ X _ _ _ _ _ X _ _ _ _ // G
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // H
    _ _ _ _ X _ _ _ _ _ X _ _ _ _ // I
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // J
    _ _ X _ _ _ X _ X _ _ _ X _ _ // K
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // L
    _ X _ _ X _ _ _ _ _ X _ _ X _ // M
    _ _ X _ _ _ _ _ _ _ _ _ X _ _ // N
    _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ // O
    _
};
#undef X

#undef _
// clang-format on

#endif // WORDS_WITH_FRIENDS

#endif // CICERO_TABLES_H_
