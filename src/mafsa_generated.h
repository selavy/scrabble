// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MAFSA_H_
#define FLATBUFFERS_GENERATED_MAFSA_H_

#include "flatbuffers/flatbuffers.h"

struct SerialMafsaLink;

struct SerialMafsaNode;
struct SerialMafsaNodeBuilder;

struct SerialMafsa;
struct SerialMafsaBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) SerialMafsaLink FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t value_;
  int32_t next_;

 public:
  SerialMafsaLink() {
    memset(static_cast<void *>(this), 0, sizeof(SerialMafsaLink));
  }
  SerialMafsaLink(int32_t _value, int32_t _next)
      : value_(flatbuffers::EndianScalar(_value)),
        next_(flatbuffers::EndianScalar(_next)) {
  }
  int32_t value() const {
    return flatbuffers::EndianScalar(value_);
  }
  int32_t next() const {
    return flatbuffers::EndianScalar(next_);
  }
};
FLATBUFFERS_STRUCT_END(SerialMafsaLink, 8);

struct SerialMafsaNode FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SerialMafsaNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TERM = 4,
    VT_CHILDREN = 6
  };
  bool term() const {
    return GetField<uint8_t>(VT_TERM, 0) != 0;
  }
  const flatbuffers::Vector<const SerialMafsaLink *> *children() const {
    return GetPointer<const flatbuffers::Vector<const SerialMafsaLink *> *>(VT_CHILDREN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_TERM) &&
           VerifyOffset(verifier, VT_CHILDREN) &&
           verifier.VerifyVector(children()) &&
           verifier.EndTable();
  }
};

struct SerialMafsaNodeBuilder {
  typedef SerialMafsaNode Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_term(bool term) {
    fbb_.AddElement<uint8_t>(SerialMafsaNode::VT_TERM, static_cast<uint8_t>(term), 0);
  }
  void add_children(flatbuffers::Offset<flatbuffers::Vector<const SerialMafsaLink *>> children) {
    fbb_.AddOffset(SerialMafsaNode::VT_CHILDREN, children);
  }
  explicit SerialMafsaNodeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SerialMafsaNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SerialMafsaNode>(end);
    return o;
  }
};

inline flatbuffers::Offset<SerialMafsaNode> CreateSerialMafsaNode(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool term = false,
    flatbuffers::Offset<flatbuffers::Vector<const SerialMafsaLink *>> children = 0) {
  SerialMafsaNodeBuilder builder_(_fbb);
  builder_.add_children(children);
  builder_.add_term(term);
  return builder_.Finish();
}

inline flatbuffers::Offset<SerialMafsaNode> CreateSerialMafsaNodeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    bool term = false,
    const std::vector<SerialMafsaLink> *children = nullptr) {
  auto children__ = children ? _fbb.CreateVectorOfStructs<SerialMafsaLink>(*children) : 0;
  return CreateSerialMafsaNode(
      _fbb,
      term,
      children__);
}

struct SerialMafsa FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SerialMafsaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NODES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<SerialMafsaNode>> *nodes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<SerialMafsaNode>> *>(VT_NODES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfTables(nodes()) &&
           verifier.EndTable();
  }
};

struct SerialMafsaBuilder {
  typedef SerialMafsa Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_nodes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerialMafsaNode>>> nodes) {
    fbb_.AddOffset(SerialMafsa::VT_NODES, nodes);
  }
  explicit SerialMafsaBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SerialMafsa> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SerialMafsa>(end);
    return o;
  }
};

inline flatbuffers::Offset<SerialMafsa> CreateSerialMafsa(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<SerialMafsaNode>>> nodes = 0) {
  SerialMafsaBuilder builder_(_fbb);
  builder_.add_nodes(nodes);
  return builder_.Finish();
}

inline flatbuffers::Offset<SerialMafsa> CreateSerialMafsaDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<SerialMafsaNode>> *nodes = nullptr) {
  auto nodes__ = nodes ? _fbb.CreateVector<flatbuffers::Offset<SerialMafsaNode>>(*nodes) : 0;
  return CreateSerialMafsa(
      _fbb,
      nodes__);
}

inline const SerialMafsa *GetSerialMafsa(const void *buf) {
  return flatbuffers::GetRoot<SerialMafsa>(buf);
}

inline const SerialMafsa *GetSizePrefixedSerialMafsa(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SerialMafsa>(buf);
}

inline const char *SerialMafsaIdentifier() {
  return "MFSA";
}

inline bool SerialMafsaBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, SerialMafsaIdentifier());
}

inline bool VerifySerialMafsaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SerialMafsa>(SerialMafsaIdentifier());
}

inline bool VerifySizePrefixedSerialMafsaBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SerialMafsa>(SerialMafsaIdentifier());
}

inline const char *SerialMafsaExtension() {
  return "dict";
}

inline void FinishSerialMafsaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SerialMafsa> root) {
  fbb.Finish(root, SerialMafsaIdentifier());
}

inline void FinishSizePrefixedSerialMafsaBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SerialMafsa> root) {
  fbb.FinishSizePrefixed(root, SerialMafsaIdentifier());
}

#endif  // FLATBUFFERS_GENERATED_MAFSA_H_
